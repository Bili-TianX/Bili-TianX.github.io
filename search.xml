<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ANTLR使用</title>
    <url>/2024/02/07/ANTLR%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="ANTLR-使用"><a href="#ANTLR-使用" class="headerlink" title="ANTLR 使用"></a>ANTLR 使用</h1><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.antlr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antlr4-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>antlr4<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.antlr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antlr4-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-获取语法文件"><a href="#2-获取语法文件" class="headerlink" title="2. 获取语法文件"></a>2. 获取语法文件</h2><p><a href="https://github.com/antlr/grammars-v4">antlr&#x2F;grammars-v4</a></p>
<h2 id="3-生成解析器"><a href="#3-生成解析器" class="headerlink" title="3. 生成解析器"></a>3. 生成解析器</h2><ol>
<li><p>将语法文件放在<code>src/main/antlr</code>下</p>
</li>
<li><p>执行Maven命令：<code>mvn antlr4:antlr4</code>，这将会在<code>target/generated-sources/antlr4</code>下生成解析器的代码文件</p>
</li>
<li><p>将文件转移到源码路径中</p>
</li>
</ol>
<h2 id="4-编写代码"><a href="#4-编写代码" class="headerlink" title="4. 编写代码"></a>4. 编写代码</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> c.*</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.misc.Interval</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTreeWalker</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> FILENAME = <span class="string">&quot;...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> ParserRuleContext.<span class="title">detail</span><span class="params">()</span></span>: String? &#123;</span><br><span class="line">    <span class="keyword">val</span> startIndex = start.startIndex</span><br><span class="line">    <span class="keyword">val</span> stopIndex = stop.stopIndex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> start.inputStream.getText(Interval.of(startIndex, stopIndex))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> errorListener = <span class="keyword">object</span> : BaseErrorListener() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">syntaxError</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            recognizer: <span class="type">Recognizer</span>&lt;*, *&gt;?,</span></span></span><br><span class="line"><span class="params"><span class="function">            offendingSymbol: <span class="type">Any</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">            line: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            charPositionInLine: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            msg: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">            e: <span class="type">RecognitionException</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span> &#123;</span><br><span class="line">            println(msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    获取源码</span></span><br><span class="line">    <span class="keyword">val</span> sourceFile = CharStreams.fromStream(FileInputStream(FILENAME))</span><br><span class="line"></span><br><span class="line"><span class="comment">//    词法分析器</span></span><br><span class="line">    <span class="keyword">val</span> lexer = CLexer(sourceFile).apply &#123;</span><br><span class="line"><span class="comment">//        忽略错误</span></span><br><span class="line">        removeErrorListeners()</span><br><span class="line">        addErrorListener(errorListener)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> tokenStream = CommonTokenStream(lexer)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    语法分析器</span></span><br><span class="line">    <span class="keyword">val</span> parser = CParser(tokenStream).apply &#123;</span><br><span class="line"><span class="comment">//        忽略错误</span></span><br><span class="line">        removeErrorListeners()</span><br><span class="line">        addErrorListener(errorListener)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    遍历语法树</span></span><br><span class="line">    ParseTreeWalker().walk(</span><br><span class="line">        <span class="keyword">object</span> : CBaseListener() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">enterParameterList</span><span class="params">(ctx: <span class="type">CParser</span>.<span class="type">ParameterListContext</span>?)</span></span> &#123;</span><br><span class="line">                println(ctx?.detail())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        parser.translationUnit()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Dev</tag>
        <tag>Java</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2024/01/28/test/</url>
    <content><![CDATA[<p>$$a^2 + b^2 &#x3D; c^2$$</p>
<pre class="mermaid">graph LR;
    A-->B;
    A-->C;
    B-->D;
    C-->D;</pre>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">1</th>
<th align="right">5</th>
<th align="left">a</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="right">1</td>
<td align="left">d</td>
</tr>
<tr>
<td align="center">3</td>
<td align="right">a</td>
<td align="left">c</td>
</tr>
<tr>
<td align="center">6</td>
<td align="right">s</td>
<td align="left">b</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>GameDev</title>
    <url>/2024/01/28/GameDev/</url>
    <content><![CDATA[<h1 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h1><p><img data-src="/images/GameDev.svg" alt="GameDev.svg"></p>
]]></content>
      <tags>
        <tag>Dev</tag>
      </tags>
  </entry>
  <entry>
    <title>KotlinCoroutines</title>
    <url>/2024/02/04/KotlinCoroutines/</url>
    <content><![CDATA[<h1 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h1><p>特点：</p>
<ul>
<li>suspendable</li>
<li>run concurrently</li>
<li>now bound to particular thread</li>
<li>light weight</li>
</ul>
<h1 id="Structured-Concurrency"><a href="#Structured-Concurrency" class="headerlink" title="Structured Concurrency"></a>Structured Concurrency</h1><p>内容：Coroutine只能运行在CoroutineScope中</p>
<p>意义：</p>
<ul>
<li>限定生命周期</li>
<li>避免Coroutine丢失、泄露</li>
<li>正确处理异常</li>
</ul>
<h1 id="CoroutineScope"><a href="#CoroutineScope" class="headerlink" title="CoroutineScope"></a>CoroutineScope</h1><p>用途：承载Coroutine</p>
<p>特点：所有Coroutine结束后才退出</p>
<h1 id="CoroutineBuilder"><a href="#CoroutineBuilder" class="headerlink" title="CoroutineBuilder"></a>CoroutineBuilder</h1><p>用途：提供CoroutineScope</p>
<p>实例：</p>
<ul>
<li><code>runBlocking</code>（阻塞线程）</li>
<li><code>launch</code></li>
</ul>
<h1 id="Suspend-function"><a href="#Suspend-function" class="headerlink" title="Suspend function"></a>Suspend function</h1><p>特点：</p>
<ul>
<li>可在Coroutine中被调用</li>
<li>可在函数内调用其他suspend function</li>
<li>自定义coroutineScope：使用<code>coroutineScope &#123; ... &#125;</code></li>
</ul>
<h1 id="Suspend-vs-Block"><a href="#Suspend-vs-Block" class="headerlink" title="Suspend vs Block"></a>Suspend vs Block</h1><h1 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h1><p>内容：代表Coroutine的Handle</p>
<p>操作：</p>
<ul>
<li><code>job.join()</code> 显式等待Coroutine完成</li>
</ul>
<h1 id="Light-Weight"><a href="#Light-Weight" class="headerlink" title="Light Weight"></a>Light Weight</h1><ul>
<li>thread：占用大量内存</li>
<li>coroutine：占用极少内存</li>
</ul>
<h1 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h1><ul>
<li><p><code>delay(ms)</code> 挂起Coroutine <code>ms</code> 毫秒</p>
</li>
<li><p><code>repeat(x) &#123; ... &#125;</code> 重复执行 <code>x</code> 次代码块</p>
</li>
</ul>
<h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><p>作用：创建返回特定结果的Coroutine</p>
<p>返回类型：<code>Deferred&lt;T&gt;</code></p>
<p>操作：</p>
<ul>
<li><code>await()</code></li>
<li><code>start()</code></li>
<li><code>Iterable&lt;Deferred&lt;T&gt;&gt;.awaitAll()</code></li>
</ul>
<h1 id="GlobalScope-launch"><a href="#GlobalScope-launch" class="headerlink" title="GlobalScope.launch"></a>GlobalScope.launch</h1><blockquote>
<p>不推荐使用</p>
</blockquote>
<p>作用：创建全局范围下的Coroutine（不受任何CoroutineScope限制）</p>
<h1 id="launch-Dispatcher"><a href="#launch-Dispatcher" class="headerlink" title="launch(Dispatcher)"></a>launch(Dispatcher)</h1><p>改变Coroutine运行的线程</p>
<ul>
<li><code>Dispatchers.Default</code> 线程池</li>
<li><code>Dispatchers.Main</code> 主线程</li>
</ul>
<h1 id="withContext"><a href="#withContext" class="headerlink" title="withContext"></a>withContext</h1><p>修改Coroutine所在的线程</p>
<blockquote>
<p>默认的context继承父亲</p>
</blockquote>
<h1 id="async-继承-Job"><a href="#async-继承-Job" class="headerlink" title="async 继承 Job"></a>async 继承 Job</h1><p><code>Job.cancel()</code></p>
<p><code>Job.setupCancellation()</code></p>
<h1 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h1><ul>
<li><p><code>send()</code></p>
</li>
<li><p><code>receive()</code></p>
</li>
<li><p><code>close()</code></p>
</li>
<li><p><code>Channel&lt;T&gt;(容量)</code></p>
<ul>
<li><p><code>&lt;空&gt;</code> 无缓冲</p>
</li>
<li><p><code>Int</code> 指定的缓冲容量</p>
</li>
<li><p><code>UNLIMITED</code> 缓存全部</p>
</li>
<li><p><code>CONFLATED</code></p>
<blockquote>
<p>Requests a conflated channel in the Channel(…) factory function. This is a shortcut to creating a channel with<br>onBufferOverflow &#x3D; DROP_OLDEST.</p>
</blockquote>
</li>
<li><p><code>RENDEZVOUS</code></p>
</li>
<li><p><code>BUFFERED</code></p>
</li>
</ul>
</li>
</ul>
<h1 id="Test-Coroutine"><a href="#Test-Coroutine" class="headerlink" title="Test Coroutine"></a>Test Coroutine</h1><p>Virtual Start Time</p>
<h1 id="while-isActive"><a href="#while-isActive" class="headerlink" title="while (isActive)"></a>while (isActive)</h1><ul>
<li><code>withTimeout()</code></li>
<li><code>withTimeoutOrNull()</code></li>
<li><code>finally</code></li>
<li><code>coroutineContext[Job]</code></li>
<li><code>coroutineContext.cancelChildren()</code></li>
</ul>
<h1 id="async-start-LAZY"><a href="#async-start-LAZY" class="headerlink" title="async(start &#x3D; LAZY)"></a>async(start &#x3D; LAZY)</h1><p>使用<code>start()</code>启动</p>
<h1 id="Unconfined-Dispatcher"><a href="#Unconfined-Dispatcher" class="headerlink" title="Unconfined Dispatcher"></a>Unconfined Dispatcher</h1><h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">val</span> scope = MainScope()</span><br><span class="line">	<span class="function"><span class="keyword">fun</span> <span class="title">destory</span><span class="params">()</span></span> &#123;</span><br><span class="line">        scope.cancel()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><ul>
<li><code>asContextElement</code></li>
</ul>
<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><h1 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> = sequence &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        yield(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> = flow &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        emit(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().collect &#123; ... &#125;</span><br><span class="line">f().onEach &#123; ... &#125;</span><br><span class="line">(<span class="number">1.</span><span class="number">.3</span>).asFlow()</span><br><span class="line">flowOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">f().transform &#123;</span><br><span class="line">	emit(<span class="string">&quot;v=<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">    emit(<span class="string">&quot;<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">f().take(<span class="number">2</span>) <span class="comment">// 取前两个元素</span></span><br></pre></td></tr></table></figure>

<p>flow 特点：可在其中用suspend函数，但其本身不被标记为suspend</p>
<p>flow仅在collect时才会执行</p>
<p>flow可用<code>withTimeout()</code>取消</p>
<p>flow可用<code>.map &#123; ... &#125;</code>、<code>.filter &#123; ... &#125;</code>等函数，且其中可用suspend函数</p>
<p>flow进行链式操作时，元素是一个个经过链式操作的，而非flow结束后才执行</p>
<hr>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">withContext(...) &#123;</span><br><span class="line">	f().collect &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误用法（会抛出异常）：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> = flow &#123;</span><br><span class="line">    withContext(...) &#123;</span><br><span class="line">        ...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确用法：</p>
<p><code>flow &#123; ... &#125;.flowOn(调度器)</code></p>
<hr>
<p><code>f().buffer().collect &#123; ... &#125;</code></p>
<p><code>f().collectLatest &#123; ... &#125;</code> 一旦有新的就重新开始</p>
<ul>
<li><p><code>f().zip(f())</code> 按顺序</p>
</li>
<li><p><code>f().combine(f())</code> 按快慢</p>
</li>
</ul>
<p>flow展平：</p>
<ul>
<li><code>flatMapConcat</code></li>
<li><code>flatMapMerge</code></li>
<li><code>flatMapLatest</code></li>
</ul>
<p><code>f().catch &#123; ... &#125;</code></p>
<h1 id="Channel（进阶）"><a href="#Channel（进阶）" class="headerlink" title="Channel（进阶）"></a>Channel（进阶）</h1><p><code>for (x in channel) &#123; ... &#125;</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">f</span><span class="params">()</span></span> = produce &#123;</span><br><span class="line">    <span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) send(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>f.consumeEach &#123; ... &#125;</code></p>
<h1 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">square</span><span class="params">(channel: <span class="type">ReceiveChannel</span>&lt;<span class="type">Int</span>&gt;)</span></span> = produce &#123;</span><br><span class="line">	<span class="keyword">for</span> (x <span class="keyword">in</span> c) send(x * x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">square(f())</span><br></pre></td></tr></table></figure>

<h1 id="fan-out"><a href="#fan-out" class="headerlink" title="fan-out"></a>fan-out</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">repeat(<span class="number">5</span>) &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        <span class="keyword">for</span> (x <span class="keyword">in</span> channel) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="fan-in"><a href="#fan-in" class="headerlink" title="fan-in"></a>fan-in</h1><p>多个Coroutine向同一个channel进行send操作</p>
<h1 id="ticker"><a href="#ticker" class="headerlink" title="ticker"></a>ticker</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">ticker</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    delayMillis: <span class="type">Long</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    initialDelayMillis: <span class="type">Long</span> = delayMillis,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    mode: <span class="type">TickerMode</span> = TickerMode.FIXED_PERIOD</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: ReceiveChannel&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CoroutineExceptionHandler"><a href="#CoroutineExceptionHandler" class="headerlink" title="CoroutineExceptionHandler"></a>CoroutineExceptionHandler</h1><h1 id="supervisorScope"><a href="#supervisorScope" class="headerlink" title="supervisorScope"></a>supervisorScope</h1><h1 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> mutex = Mutex()</span><br><span class="line">mutex.withLock() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Select-Experssion"><a href="#Select-Experssion" class="headerlink" title="Select Experssion"></a>Select Experssion</h1>]]></content>
      <tags>
        <tag>Dev</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/02/07/%E3%80%8ASquid%20Game%E3%80%8B%E4%B9%8B%E3%80%8AGlass%20Stepping%20Stones%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《Squid-Game》之《Glass-Stepping-Stones》"><a href="#《Squid-Game》之《Glass-Stepping-Stones》" class="headerlink" title="《Squid Game》之《Glass Stepping Stones》"></a>《Squid Game》之《Glass Stepping Stones》</h1><h2 id="游戏内容"><a href="#游戏内容" class="headerlink" title="游戏内容"></a>游戏内容</h2><p>参赛者先在不知游戏情况下选择并穿上数字马甲来决定过桥顺序，之后要在16分钟内赤脚走过一条悬挂在高空、由16组玻璃组成的桥，每步需要从一组两块玻璃（分别为可承重两人的强化玻璃与无法承重的普通玻璃）中选择其一走过，顺利到达终端即可过关，踩中普通玻璃者即当场坠亡。时间一到，所有玻璃将被爆破。</p>
<h2 id="和GPT的对话"><a href="#和GPT的对话" class="headerlink" title="和GPT的对话"></a>和GPT的对话</h2><blockquote>
<p>User</p>
</blockquote>
<p>《Squid Game》中的《Glass Stepping Stones》项目应该采用什么策略来使获胜概率最大化</p>
<blockquote>
<p>Assistant</p>
</blockquote>
<p>《Squid Game》（《鱿鱼游戏》）中的《Glass Stepping Stones》（玻璃踏石）项目是一项高度紧张和危险的测试，参赛者需要在两种不同强度的玻璃板之间选择其一跳跃，以通过一座桥。一种玻璃板足够强以支撑一个人的重量，而另一种则会在重压下碎裂，导致参赛者坠落失败。在这种生死攸关的游戏中，最大化获胜概率的策略是至关重要的。</p>
<p>以下是一些可能提高成功率的策略：</p>
<ol>
<li><p><strong>观察和记忆</strong>：如果不是第一个跳跃的人，观察前面参赛者的选择和结果是至关重要的。记住每一步正确的选择可以帮助后续的参赛者避免重复他们的错误。</p>
</li>
<li><p><strong>团队合作</strong>：尽管《Squid Game》是一个竞争性游戏，但在某些情况下，团队合作可以增加存活的机会。参赛者可以轮流尝试，分享观察结果，甚至牺牲自己以帮助团队中其他成员通过。</p>
</li>
<li><p><strong>利用物理原理</strong>：尽管在剧中没有明显提及，但理论上，通过观察玻璃板的振动、声音或者其他物理特性，可能推断出哪种玻璃更能承重。这需要有相应的物理知识或实验经验。</p>
</li>
<li><p><strong>心理战术</strong>：利用心理战术影响其他参赛者。例如，通过说服、威胁或欺骗让其他人先行，从而收集关于哪种玻璃板更安全的信息。</p>
</li>
<li><p><strong>保持冷静</strong>：在压力极大的情况下保持冷静，可以帮助参赛者更准确地观察和作出决策。恐慌和急躁可能导致错误的判断。</p>
</li>
<li><p><strong>利用游戏规则</strong>：深入理解和利用游戏的规则可能揭示一些有利于生存的策略。例如，如果规则允许，可能可以使用衣物、鞋子等物品测试玻璃板的强度。</p>
</li>
<li><p><strong>身体条件</strong>：保持良好的身体状态，如平衡感、跳跃力等，可以在需要时提供更多的选择和灵活性。</p>
</li>
<li><p><strong>最后时刻的观察</strong>：如果时间允许，在最后一刻观察玻璃板的任何微小差异，可能在决定性的时刻提供帮助。</p>
</li>
</ol>
<p>需要注意的是，无论采取何种策略，由于《Squid Game》中的这一项目本质上设计为具有很大不确定性和危险性，任何策略都不能保证100%的成功率。在现实生活中，避免参与任何形式的危险游戏是保护自己的最佳策略。</p>
<blockquote>
<p>User</p>
</blockquote>
<p>我有一些意见：</p>
<ol>
<li>你无法决定参赛顺序，而我需要的是通用的策略</li>
<li>如果采取团队合作，必然会有牺牲者。如果你去当牺牲者就会有很大概率失败，这与胜利背道而驰</li>
<li>我想限定一下，该项目无法通过除了踩上去之外的方式判断玻璃是否能载人</li>
</ol>
<p>同时请详细设计“心理战术”的策略（如具体采用什么样的话术）</p>
<blockquote>
<p>Assistant</p>
</blockquote>
<p>在您提出的限定条件下，针对《Squid Game》中《Glass Stepping Stones》项目的策略需要更加聚焦于心理战术和个人决策，而非物理测试或团队合作的牺牲。考虑到无法决定参赛顺序且无法通过非直接接触方式测试玻璃，以下是一些调整后的策略，特别强调心理战术方面：</p>
<h3 id="心理战术策略"><a href="#心理战术策略" class="headerlink" title="心理战术策略"></a>心理战术策略</h3><ol>
<li><p><strong>建立信任与领导力</strong>：</p>
<ul>
<li>从游戏开始就尽力展现团队合作的精神和领导能力，通过帮助他人或提出有用的建议来建立自己的信任度。</li>
<li>使用诸如“我们只有合作才有机会全部活下去，让我们一起找出最安全的路径”之类的话术，强调集体胜利的可能性，即使实际目标是利用他人前进。</li>
</ul>
</li>
<li><p><strong>利用他人的恐惧和自保心理</strong>：</p>
<ul>
<li>在紧要关头，可以利用他人的恐惧心理，说服他们先行。例如，可以说：“如果我们都犹豫不决，时间就会耗尽，那样我们都没有机会了。你跳过去，我会记住正确的路径，然后带领其他人跟上，这样我们所有人都有机会。”</li>
<li>强调任何人的行动都是为了团队的利益，即使内心目的是为了自己的存活。</li>
</ul>
</li>
<li><p><strong>制造紧迫感</strong>：</p>
<ul>
<li>在时间即将耗尽时，利用紧迫感来推动他人行动，例如：“我们没有时间了，如果现在不跳，我们都会失败。你跳过去能给我们所有人带来希望。”</li>
</ul>
</li>
<li><p><strong>展现自信</strong>：</p>
<ul>
<li>即使你并不确定，也要尽量展现出自信的态度，这样可以影响他人的决策。比如，对犹豫不决的人说：“我相信你的判断，你看起来很有直觉。选一个你觉得对的，我跟着你。”</li>
</ul>
</li>
</ol>
<h3 id="个人决策策略"><a href="#个人决策策略" class="headerlink" title="个人决策策略"></a>个人决策策略</h3><ul>
<li><strong>冷静分析</strong>：尽管无法通过物理方法测试，但保持冷静，观察前面参赛者的行动和结果，尽可能从他人的错误中学习。</li>
<li><strong>时间管理</strong>：意识到每一次选择都与时间赛跑。不要在一步上犹豫太久，以免耗尽宝贵的时间。</li>
<li><strong>心理准备</strong>：准备好在必要时冒险。在这种生死游戏中，过分谨慎可能同样导致失败。</li>
</ul>
<p>总之，虽然《Glass Stepping Stones》的挑战极其残酷，但通过巧妙运用心理战术，可能会在一定程度上提高生存的机会。然而，重要的是要记住，这些策略都基于理论上的分析，在实际的高压和恐惧环境中，每个人的反应和决策可能大相径庭。在现实生活中，避免危险和保护自身安全始终是最重要的。</p>
<h2 id="感触"><a href="#感触" class="headerlink" title="感触"></a>感触</h2><p>![ce1d85cde5ee1438ab67c8e7c094152](C:\Users\TianX\Documents\WeChat Files\wxid_kkx7m62cnac222\FileStorage\Temp\ce1d85cde5ee1438ab67c8e7c094152.png)</p>
]]></content>
  </entry>
  <entry>
    <title>字符串压缩、解压缩</title>
    <url>/2024/02/03/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9%E3%80%81%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p><img data-src="/images/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9%E3%80%81%E8%A7%A3%E5%8E%8B%E7%BC%A9.png" alt="字符串压缩、解压缩.png"></p>
<h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Regex(<span class="string">&quot;&quot;&quot;(.)\1*&quot;&quot;&quot;</span>)</span><br><span class="line">    .findAll(<span class="string">&quot;AAABBCCCCDD&quot;</span>)</span><br><span class="line">    .map &#123; it.value &#125;</span><br><span class="line">    .forEach &#123; print(<span class="string">&quot;<span class="subst">$&#123;it.length&#125;</span><span class="subst">$&#123;it[<span class="number">0</span>]&#125;</span>&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>

<h1 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Regex(<span class="string">&quot;&quot;&quot;(\d+)([A-Za-z])&quot;&quot;&quot;</span>)</span><br><span class="line">    .findAll(<span class="string">&quot;3A2B4C2D&quot;</span>)</span><br><span class="line">    .map &#123; it.groupValues &#125;</span><br><span class="line">    .forEach &#123; print(it[<span class="number">2</span>].repeat(it[<span class="number">1</span>].toInt())) &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Dev</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
